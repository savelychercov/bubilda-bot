import discord
from discord import Interaction
from discord.ext import commands
from memory.files import InventoryData as inv
from memory.files import BalanceData
from library.things_lib import Things
from library.graphics import SearchContent
from memoryV2 import DB
from dataclasses import dataclass
from library import logger
import config
import random
import math
import traceback


@dataclass
class FishData:
    name: str
    description: str
    emoji: str
    image: str
    cost: int
    size: tuple[int, int]


@dataclass
class Fish:
    name: str
    description: str
    emoji: str
    image: str
    cost: int
    size: int


fish_db = DB.DataBase("fishbag", "‚ô¶")
fish_slice_key = "‚ôÇ"


def db_set_fishes(guild_id: int, user_id: int, fishes: list[Fish]) -> None:
    fish_str = fish_slice_key.join([str(fish) for fish in fishes])
    fish_db.new_key(guild_id, user_id, fish_str)


def db_get_fishes(guild_id, user_id) -> list[Fish]:
    raw_str = fish_db.read_key(guild_id, user_id)
    if raw_str is None or not raw_str.strip():
        return []
    fish_list = raw_str.strip().split(fish_slice_key)
    return [eval(fish) for fish in fish_list]


def db_add_fish(guild_id, user_id, fish: Fish) -> None:
    fish_list = db_get_fishes(guild_id, user_id)
    fish_list.append(fish)
    db_set_fishes(guild_id, user_id, fish_list)


def fish_gen(fish_data: FishData) -> Fish:
    size = random.randint(fish_data.size[0], fish_data.size[1])
    average_size = (fish_data.size[0] + fish_data.size[1]) / 2
    max_delta = average_size - fish_data.size[0]
    delta_size = size - average_size
    aberration_coeff = delta_size / max_delta
    cost = round(aberration_coeff * config.fish_price_aberration * fish_data.cost + fish_data.cost)
    fish = Fish(
        name=fish_data.name,
        description=fish_data.description,
        emoji=fish_data.emoji,
        image=fish_data.image,
        cost=cost,
        size=size
    )
    return fish


def get_random_fish(power: int) -> Fish:
    if power == 1:
        fish_data = random.choice(small_fish)
    elif power == 2:
        fish_data = random.choice(medium_fish)
    else:  # power == 3:
        fish_data = random.choice(large_fish)
    return fish_gen(fish_data)


small_fish = [  # 194, 194, 194
    FishData(name="–†—ã–±–∞ –∫–ª–æ—É–Ω",
             description="–ö–ª–æ—É–Ω –∫–∞–∫ —Ç—ã",
             emoji=":tropical_fish:",
             image="https://www.stellexshop.ru/upload/iblock/ed0/erz977qq64a5iugh7gjgn928ld83r7dz/nemo480.jpg",
             cost=1000,
             size=(5, 14)),
    FishData(name="–ö–∞—Ä–∞—Å–∏–∫",
             description="–ü—Ä–æ—Å—Ç–æ —Ä—ã–±–∞, —á—Ç–æ —Å –Ω–µ–≥–æ –≤–∑—è—Ç—å",
             emoji=":fish:",
             image="https://static.wikia.nocookie.net/fortnite/images/7/7b/%D0%9E%D1%80%D0%B0%D0%BD%D0%B6%D0%B5%D0%B2%D0%B0%D1%8F_%D1%80%D1%8B%D0%B1%D0%BA%D0%B0.png/revision/latest?cb=20210221072224&path-prefix=ru",
             cost=800,
             size=(5, 20)),
    FishData(name="–†–∞–∫",
             description="–°–Ω–æ–≤–∞ —Å—Ñ–∏–¥–∏–ª",
             emoji=":lobster:",
             image="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT96PNeWr_a5P5-5oYA1jI5CpK_mdnqNV6Vpg&s",
             cost=500,
             size=(3, 10)),
]

medium_fish = [  # 98, 160, 240
    FishData(name="–°–∏–Ω–∏–π –ª–æ–±—Å—Ç–µ—Ä",
             description="–ö–∞–∫ –∏–∑ –º–µ–º–∞",
             emoji=":lobster:",
             image="https://pikuco.ru/upload/test_stable/5a5/5a53a24f65bbcf7c756be1ccf8fb8da8.webp",
             cost=5000,
             size=(20, 35)),
    FishData(name="–†—ã–±–∞ —Ñ—É–≥—É",
             description="–°–º–µ—à–Ω–∞—è —Ä—ã–±–∞",
             emoji=":blowfish:",
             image="https://flomaster.top/o/uploads/posts/2024-02/thumbs/1708701959_flomaster-top-p-samie-smeshnie-ribi-vkontakte-risunok-1.jpg",
             cost=3000,
             size=(10, 20)),
]

large_fish = [  # 255, 182, 79
    FishData(name="–ú–µ–≥–∞–ª–∞–¥–æ–Ω",
             description="–≠–¢–û –†–ï–ê–õ–¨–ù–û –ú–ï–ì–ê–õ–ê–î–û–ù!!!",
             emoji=":lobster:",
             image="https://i.ytimg.com/vi/sngjQpWrxAc/maxresdefault.jpg",
             cost=10000,
             size=(200, 400)),
    FishData(name="–†—ã–±–∞ –ê–¥—É–Ω",
             description="–°–∏–Ω–∏–π",
             emoji=":fish:",
             image="https://media.tenor.com/Gr2xrowbvHgAAAAM/%D0%BF%D0%B0%D0%BF%D0%B8%D1%87-%D0%B0%D0%B4%D1%83%D0%BD.gif",
             cost=3000,
             size=(20, 35)),
]

current_managers = {
    # user_id: manager
}


class FishingManager:
    def __init__(self, bot: commands.Bot, context: commands.Context):
        self.bot = bot
        self.user = context.author
        self.channel = context.channel
        self.guild = context.guild
        self.message: discord.Message = None
        self.wait_count = 1

    def get_check(self) -> bool:
        is_pressed = False

        async def check_owner(interaction: discord.Interaction):
            nonlocal is_pressed
            response: discord.InteractionResponse = interaction.response
            check = interaction.user.id == self.user.id
            if not check:
                await response.send_message("–ù–µ –º–µ—à–∞–π—Ç–µ —á–µ–ª–æ–≤–µ–∫—É —Ä—ã–±–∞—á–∏—Ç—å :pray:", ephemeral=True)
                return False
            if is_pressed:
                await response.defer()
                return False
            is_pressed = True
            return True

        return check_owner

    async def start(self) -> None:
        has_rod = inv.has_thing(self.guild.id, self.user.id, "–£–¥–æ—á–∫–∞")
        bait_count = inv.get_uses(self.guild.id, self.user.id, "–ù–∞–∂–∏–≤–∫–∞")
        has_bait = bait_count != 0
        desc = f"> –£–¥–æ—á–∫–∞ :fishing_pole:: {'–ï—Å—Ç—å' if has_rod else '–ù–µ—Ç'}\n> –ù–∞–∂–∏–≤–∫–∞ :worm:: {(str(bait_count) + ' —à—Ç') if has_bait else '–ù–µ—Ç'}"
        if not has_rod or not has_bait:
            desc += "\n\n:exclamation: –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä—ã–±–∞—á–∏—Ç—å, —É –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ :exclamation:"

        start_embed = discord.Embed(
            title=":tropical_fish: –†—ã–±–∞–ª–∫–∞ :fish:",
            description=desc,
            color=discord.Color.from_rgb(84, 232, 145))
        start_embed.set_footer(text=f"{self.user.display_name}", icon_url=self.user.display_avatar.url)

        self.message = await self.channel.send(embed=start_embed)
        start_view = self.FishingStartView(self, enabled=has_rod and has_bait)
        await self.message.edit(view=start_view)

    async def stop(self) -> None:
        cancel_embed = discord.Embed(
            title="–†—ã–±–∞–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
            description="–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑–∞!",
            color=discord.Color.from_rgb(56, 89, 50)
        )
        cancel_embed.set_footer(text=self.user.display_name, icon_url=self.user.display_avatar.url)

        try:
            await self.message.edit(embed=cancel_embed, view=None)
        except discord.errors.NotFound:
            pass
        except Exception as e:
            logger.log("Cant cancel fishing session:\n" + str(e))

    class FishingStartView(discord.ui.View):
        def __init__(self, manager, enabled: bool):
            super().__init__(timeout=60*10)

            self.manager: FishingManager = manager

            self.enabled = enabled
            self.interaction_check = self.manager.get_check()

            fishing_button = discord.ui.Button(
                label="–ù–∞—á–∞—Ç—å —Ä—ã–±–∞–ª–∫—É",
                style=discord.ButtonStyle.green,
                emoji="üé£",
                disabled=not enabled,
                row=0)
            fishing_button.callback = self.fishing_button
            self.add_item(fishing_button)

        async def on_timeout(self) -> None:
            self.stop()
            await self.manager.stop()

        async def fishing_button(self, interaction: discord.Interaction):
            response: discord.InteractionResponse = interaction.response
            await response.defer()
            if not inv.use_thing(self.manager.guild.id, self.manager.user.id, "–ù–∞–∂–∏–≤–∫–∞"):
                await response.send_message("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä—ã–±–∞—á–∏—Ç—å, —É –≤–∞—Å –Ω–µ—Ç –Ω–∞–∂–∏–≤–∫–∏", ephemeral=True)
                await self.manager.stop()
                return
            view = self.manager.FishingWaitView(self.manager, first=True)
            wait_embed = view.get_embed()
            await self.manager.message.edit(embed=wait_embed, view=view)

        @discord.ui.button(label="–û—Ç–º–µ–Ω–∞", style=discord.ButtonStyle.gray, emoji="‚ùå", row=1)
        async def cancel_button(self, interaction: discord.Interaction, button: discord.ui.Button):
            await self.manager.message.edit(view=None)
            await self.manager.stop()
            self.stop()

    class FishingWaitView(discord.ui.View):
        def __init__(self, manager, first: bool):
            super().__init__(timeout=60*10)
            self.manager: FishingManager = manager
            self.interaction_check = self.manager.get_check()
            self.first = first
            self.ended = False

        def get_embed(self):
            if self.first:
                wait_embed = discord.Embed(
                    title=":tropical_fish: –†—ã–±–∞–ª–∫–∞ :fish:",
                    description=f"–í—ã –∑–∞–∫–∏–Ω—É–ª–∏ —É–¥–æ—á–∫—É!\n> -1 –ù–∞–∂–∏–≤–∫–∞ :worm:\n\n–í—ã –∂–¥–µ—Ç–µ {self.manager.wait_count} –º–∏–Ω.",
                    color=discord.Color.from_rgb(84, 232, 145))
            else:
                wait_embed = discord.Embed(
                    title=":tropical_fish: –†—ã–±–∞–ª–∫–∞ :fish:",
                    description=f"–†—ã–±–∞ –Ω–µ –∫–ª—é–µ—Ç...\n\n–í—ã –∂–¥–µ—Ç–µ {self.manager.wait_count} –º–∏–Ω.",
                    color=discord.Color.from_rgb(84, 232, 145))
            wait_embed.set_footer(
                text=f"{self.manager.user.display_name}",
                icon_url=self.manager.user.display_avatar.url)
            return wait_embed

        async def on_timeout(self) -> None:
            if self.ended: return
            self.stop()
            await self.manager.stop()

        @discord.ui.button(label="–¢—è–Ω—É—Ç—å", style=discord.ButtonStyle.gray, emoji="üé£", row=0)
        async def catch_button(self, interaction: discord.Interaction, button: discord.ui.Button):
            response: discord.InteractionResponse = interaction.response
            self.ended = True
            self.stop()
            nothing_embed = discord.Embed(
                title=":tropical_fish: –†—ã–±–∞–ª–∫–∞ :fish:",
                description="–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–π–º–∞–ª–∏!\n–†—ã–±–∞–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                color=discord.Color.from_rgb(84, 232, 145))
            nothing_embed.set_footer(
                text=f"{self.manager.user.display_name}",
                icon_url=self.manager.user.display_avatar.url)
            await self.manager.message.edit(embed=nothing_embed, view=None)

        @discord.ui.button(label="–ñ–¥–∞—Ç—å", style=discord.ButtonStyle.green, emoji="üò¥", row=0)
        async def wait_button(self, interaction: discord.Interaction, button: discord.ui.Button):
            response: discord.InteractionResponse = interaction.response
            await response.defer()
            self.manager.wait_count += 1
            if config.nibble_chance > random.random():
                view = self.manager.FishingNibbleView(self.manager, power=random.randint(1, 3))
            else:
                view = self.manager.FishingWaitView(self.manager, first=False)
            next_embed = view.get_embed()
            await self.manager.message.edit(embed=next_embed, view=view)

        @discord.ui.button(label="–û—Ç–º–µ–Ω–∞", style=discord.ButtonStyle.gray, emoji="‚ùå", row=1)
        async def cancel_button(self, interaction: discord.Interaction, button: discord.ui.Button):
            await self.manager.message.edit(view=None)
            await self.manager.stop()
            self.stop()

    class FishingNibbleView(discord.ui.View):
        def __init__(self, manager, power: int):
            super().__init__(timeout=60*10)
            self.manager: FishingManager = manager
            self.interaction_check = self.manager.get_check()
            self.power = power
            self.ended = False

        async def on_timeout(self) -> None:
            if self.ended: return
            self.stop()
            await self.manager.stop()

        def get_embed(self):
            if self.power == 1:
                nibble_embed = discord.Embed(
                    title=":tropical_fish: –†—ã–±–∞–ª–∫–∞ :fish:",
                    description=f"–ß—É—Ç—å —á—É—Ç—å –∫–ª—é–µ—Ç!\n\n–í—ã –∂–¥–µ—Ç–µ {self.manager.wait_count} –º–∏–Ω.",
                    color=discord.Color.from_rgb(84, 232, 145))
            elif self.power == 2:
                nibble_embed = discord.Embed(
                    title=":tropical_fish: –†—ã–±–∞–ª–∫–∞ :fish:",
                    description=f"–ö–ª—é–µ—Ç!\n\n–í—ã –∂–¥–µ—Ç–µ {self.manager.wait_count} –º–∏–Ω.",
                    color=discord.Color.from_rgb(84, 232, 145))
            else:  # self.power == 3:
                nibble_embed = discord.Embed(
                    title=":tropical_fish: –†—ã–±–∞–ª–∫–∞ :fish:",
                    description=f"–ñ–æ—Å–∫–∞ –∫–ª—é–µ—Ç!\n\n–í—ã –∂–¥–µ—Ç–µ {self.manager.wait_count} –º–∏–Ω.",
                    color=discord.Color.from_rgb(84, 232, 145))
            nibble_embed.set_footer(
                text=f"{self.manager.user.display_name}",
                icon_url=self.manager.user.display_avatar.url)
            return nibble_embed

        @discord.ui.button(label="–¢—è–Ω—É—Ç—å", style=discord.ButtonStyle.green, emoji="üé£", row=0)
        async def catch_button(self, interaction: discord.Interaction, button: discord.ui.Button):
            try:
                response: discord.InteractionResponse = interaction.response
                await response.defer()
                self.ended = True
                self.stop()
                if config.fish_fall_off_chance > random.random():
                    end_embed = discord.Embed(
                        title=":tropical_fish: –†—ã–±–∞–ª–∫–∞ :fish:",
                        description="–†—ã–±–∞ —Å–æ—Ä–≤–∞–ª–∞—Å—å!\n–ü–æ–≤–µ–∑–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑\n–†—ã–±–∞–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                        color=discord.Color.from_rgb(61, 107, 26))
                elif config.catch_thing_chance > random.random():
                    thing, uses, emoji = Things.get_random_thing()
                    inv.add_thing_or_uses(self.manager.guild.id, self.manager.user.id, thing, uses)
                    end_embed = discord.Embed(
                        title=":tropical_fish: –†—ã–±–∞–ª–∫–∞ :fish:",
                        description=f"–í—ã –ø–æ–π–º–∞–ª–∏ {thing} {emoji}\n"
                                    f"> –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {uses} —à—Ç\n\n",
                        color=discord.Color.from_rgb(150, 255, 210))
                else:
                    fish = get_random_fish(self.power)
                    db_add_fish(self.manager.guild.id, self.manager.user.id, fish)
                    fish_type = ["–º–∞–ª–µ–Ω—å–∫—É—é", "—Å—Ä–µ–¥–Ω—é—é", "–±–æ–ª—å—à—É—é"][self.power - 1]
                    color = ((194, 194, 194), (98, 160, 240), (255, 182, 79))[self.power - 1]
                    end_embed = discord.Embed(
                        title=":tropical_fish: –†—ã–±–∞–ª–∫–∞ :fish:",
                        description=f"–í—ã –ø–æ–π–º–∞–ª–∏ {fish_type} —Ä—ã–±—É: {fish.name} {fish.emoji}\n"
                                    f"> –û–ø–∏—Å–∞–Ω–∏–µ: {fish.description}\n"
                                    f"> –¶–µ–Ω–∞ :moneybag:: {fish.cost}$\n"
                                    f"> –†–∞–∑–º–µ—Ä: {fish.size} —Å–º\n\n"
                                    "–†—ã–±–∞–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                        color=discord.Color.from_rgb(*color))
                    end_embed.set_thumbnail(url=fish.image)
                end_embed.set_footer(
                    text=f"{self.manager.user.display_name}",
                    icon_url=self.manager.user.display_avatar.url)
                await self.manager.message.edit(embed=end_embed, view=None)
            except Exception as e:
                logger.log("Cant catch fish in nibble manager:\n" + str(e))

        @discord.ui.button(label="–ñ–¥–∞—Ç—å", style=discord.ButtonStyle.green, emoji="üò¥", row=0)
        async def wait_button(self, interaction: discord.Interaction, button: discord.ui.Button):
            response: discord.InteractionResponse = interaction.response
            await response.defer()
            self.manager.wait_count += 1
            if config.nibble_chance > random.random():
                view = self.manager.FishingNibbleView(self.manager, power=random.randint(1, 3))
            else:
                view = self.manager.FishingWaitView(self.manager, first=False)
            next_embed = view.get_embed()
            await self.manager.message.edit(embed=next_embed, view=view)

        @discord.ui.button(label="–û—Ç–º–µ–Ω–∞", style=discord.ButtonStyle.gray, emoji="‚ùå", row=1)
        async def cancel_button(self, interaction: discord.Interaction, button: discord.ui.Button):
            await self.manager.message.edit(view=None)
            await self.manager.stop()
            self.stop()


class FishingCog(commands.Cog):
    def __init__(self, bot):
        self.__cog_name__ = "–†—ã–±–∞–ª–∫–∞"
        self.__cog_description__ = "–ö–æ–º–∞–Ω–¥—ã —Ä—ã–±–∞–ª–∫–∏"
        self.bot = bot

    @commands.command(brief="–†—ã–±–∞—á–∏—Ç—å", aliases=["fish", "f"])
    async def fishing(self, ctx: commands.Context):
        if current_managers.get(ctx.author.id, False):
            await current_managers[ctx.author.id].stop()
            del current_managers[ctx.author.id]

        manager = FishingManager(self.bot, ctx)
        current_managers[ctx.author.id] = manager
        await manager.start()

    @fishing.error
    async def on_error(self, ctx: commands.Context, error):
        if current_managers.get(ctx.author.id, False):
            await current_managers[ctx.author.id].stop()
            del current_managers[ctx.author.id]
        logger.log("Error in fishing session:\n" + str(error))
        embed = discord.Embed(
            title=":warning: –û—à–∏–±–∫–∞",
            description="–Ø —Ö–∑ –≤ —á–µ–º –¥–µ–ª–æ",
            color=discord.Color.red())
        await ctx.send(embed=embed)

    @commands.command(brief="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏—Ö —Ä—ã–±–æ–∫", aliases=["myf", "mf", "myfish"])
    async def fishbag(self, ctx: commands.Context, member: discord.Member = None):
        if member is None:
            member = ctx.author
        fish_on_page_count = 5
        pages_count = 0

        class MyFishButtons(discord.ui.View):
            def __init__(self, enabled: bool):
                super().__init__(timeout=60*10)
                self.page = 0
                self.is_sell_pressed = False
                disabled_pagination = not enabled

                previous_button = discord.ui.Button(
                    label=None, style=discord.ButtonStyle.gray, emoji="‚óÄ", disabled=disabled_pagination)
                previous_button.callback = self.previous_button_callback
                next_button = discord.ui.Button(
                    label=None, style=discord.ButtonStyle.gray, emoji="‚ñ∂", disabled=disabled_pagination)
                next_button.callback = self.next_button_callback
                if ctx.author.id == member.id:
                    sell_button = discord.ui.Button(
                        label="–ü—Ä–æ–¥–∞—Ç—å –≤—Å—é —Ä—ã–±—É", style=discord.ButtonStyle.gray, emoji="üí∞")
                    sell_button.callback = self.sell_button_callback
                    self.add_item(sell_button)
                self.add_item(previous_button)
                self.add_item(next_button)

            async def on_timeout(self) -> None:
                await message.edit(view=None)
                self.stop()

            async def interaction_check(self, interaction: Interaction, /) -> bool:
                response: discord.InteractionResponse = interaction.response
                await response.defer()
                if interaction.user.id == ctx.author.id:
                    return True
                else:
                    await response.send_message("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–Ω–æ–ø–∫—É", ephemeral=True)
                    return False

            async def previous_button_callback(self, interaction: discord.Interaction):
                if self.page > 0:
                    self.page -= 1
                    await update_page(self.page)

            async def next_button_callback(self, interaction: discord.Interaction):
                if self.page < pages_count - 1:
                    self.page += 1
                    await update_page(self.page)

            async def sell_button_callback(self, interaction: discord.Interaction):
                response: discord.InteractionResponse = interaction.response
                followup: discord.Webhook = interaction.followup
                if self.is_sell_pressed:
                    return
                self.is_sell_pressed = True
                fishes = db_get_fishes(ctx.guild.id, ctx.author.id)
                if not fishes:
                    await followup.send("–£ –≤–∞—Å –Ω–µ—Ç —Ä—ã–±—ã", ephemeral=True)
                    return
                db_set_fishes(ctx.guild.id, ctx.author.id, [])
                total = 0
                for fish in fishes:
                    total += fish.cost
                BalanceData.add_balance(str(ctx.guild.id), str(ctx.author.id), total)
                embed = discord.Embed(
                    title=f"–í—ã –ø—Ä–æ–¥–∞–ª–∏ –≤—Å—é —Å–≤–æ—é —Ä—ã–±—É, –∏ –ø–æ–ª—É—á–∏–ª–∏ {total}$",
                    description=":moneybag: :money_mouth: :money_with_wings:",
                    color=discord.Color.green())
                embed.set_thumbnail(url=SearchContent.get_gif("money"))
                await followup.send(embed=embed)
                await update_page(self.page)

        pagination_view = None

        async def update_page(page: int = 0):
            nonlocal pages_count, pagination_view
            fishes = db_get_fishes(ctx.guild.id, member.id)
            all_fishes_count = len(fishes)
            pages_count = math.ceil(len(fishes) / fish_on_page_count) if fishes else 1
            if pagination_view is None:
                pagination_view = MyFishButtons(pages_count > 1)
            if len(fishes) > 5:
                left = min(page * fish_on_page_count, all_fishes_count-1)
                right = min((page + 1) * fish_on_page_count, all_fishes_count)
                fishes = fishes[left:right]
            if not fishes: desc = "-–ø—É—Å—Ç–æ-"
            else: desc = ""
            for fish in fishes:
                desc += (f"{fish.emoji} {fish.name}\n"
                         f"> –û–ø–∏—Å–∞–Ω–∏–µ: {fish.description}\n"
                         f"> –¶–µ–Ω–∞ :moneybag:: {fish.cost}$\n"
                         f"> –†–∞–∑–º–µ—Ä: {fish.size} —Å–º\n\n")
            title = f"**–†—ã–±–∫–∏ {member.display_name}** ({page+1} / {pages_count})" if member != ctx.author else f"**–í–∞—à–∏ —Ä—ã–±–∫–∏:** ({page+1} / {pages_count})"
            embed = discord.Embed(
                title=title,
                description=desc,
                color=discord.Color.from_rgb(163, 101, 0),
            )
            embed.set_footer(text=f"–†—ã–±—ã {member.display_name}", icon_url=member.display_avatar.url)

            try:
                await message.edit(content=None, embed=embed, view=pagination_view)
            except discord.errors.NotFound:
                pass

        message = await ctx.send("–ó–∞–≥—Ä—É–∑–∫–∞...")
        await update_page()

    @commands.command(brief="–î–æ–±–∞–≤–∏—Ç—å —Ä—ã–±—É –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å (dev)")
    async def addfish(self, ctx: commands.Context, member: discord.Member = None, fish_str: str = None, count: int = 1):
        if ctx.author.id not in config.admin_ids:
            await ctx.send("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É")
            return
        if member is None:
            member = ctx.author
        if fish_str is None:
            await ctx.send("–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Ä—ã–±—É")
            return

        fish_str = fish_str.lower()
        fish_pool = small_fish + medium_fish + large_fish
        fish_data = next((f for f in fish_pool if f.name.lower() == fish_str), None)
        if not fish_data:
            await ctx.send("–†—ã–±–∞ –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω–∞")
            return
        embeds = []
        for _ in range(count):
            fish = fish_gen(fish_data)
            db_add_fish(ctx.guild.id, member.id, fish)

            embed = discord.Embed(
                title="–†—ã–±–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:",
                description=f"{fish.emoji} **{fish.name}**\n\n"
                            f"> –û–ø–∏—Å–∞–Ω–∏–µ: {fish.description}\n"
                            f"> –¶–µ–Ω–∞ :moneybag:: {fish.cost}$\n"
                            f"> –†–∞–∑–º–µ—Ä: {fish.size} —Å–º\n",
                color=discord.Color.from_rgb(163, 101, 0),
            )
            embed.set_thumbnail(url=fish_data.image)
            embeds.append(embed)
        if sum([len(emb) for emb in embeds]) < 5000:
            await ctx.send(embeds=embeds)
        else:
            await ctx.send(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {count} —Ä—ã–± ({fish_data.name})")

    @commands.command(brief="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä—ã–±–µ", aliases=["fishi", "fi", "finfo"])
    async def fishinfo(self, ctx: commands.Context, fish_str: str):
        fish_str = fish_str.lower().strip()
        fish_pool = small_fish + medium_fish + large_fish
        fish_data = next((f for f in fish_pool if f.name.lower() == fish_str), None)
        if not fish_data:
            await ctx.send("–†—ã–±–∞ –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω–∞")
            return

        embed = discord.Embed(
            title="**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä—ã–±–µ:**",
            description=f"{fish_data.emoji} **{fish_data.name}**\n\n"
                        f"> –û–ø–∏—Å–∞–Ω–∏–µ: {fish_data.description}\n"
                        f"> –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ :moneybag:: {fish_data.cost}$\n"
                        f"> –†–∞–∑–º–µ—Ä: {fish_data.size[0]}—Å–º - {fish_data.size[1]}—Å–º\n",
            color=discord.Color.from_rgb(163, 101, 0),
        )
        embed.set_thumbnail(url=fish_data.image)
        await ctx.send(embed=embed)


async def setup(bot):
    await bot.add_cog(FishingCog(bot))
